{"version":3,"sources":["view_quests/QuestView.js","view_map/MapView.js","App.js","serviceWorker.js","index.js"],"names":["QuestView","props","className","id","to","body_height","parseInt","document","body","scrollHeight","getComputedStyle","getElementById","getPropertyValue","setAttribute","Component","MapView","App","path","component","Boolean","window","location","hostname","match","renderReactDom","ReactDOM","render","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSA+BeA,E,YAxBX,WAAYC,GAAO,qEACTA,I,sEAKN,OACI,yBAAKC,UAAU,gBACX,yBAAKC,GAAG,aACJ,6BACI,kBAAC,IAAD,CAAMC,GAAG,QAAT,Y,0CAShB,IAAIC,EAAc,YAAcC,SAASC,SAASC,KAAKC,cAAiB,EAAEH,SAASI,iBAAiBH,SAASI,eAAe,aAAa,MAAMC,iBAAiB,kBAAqB,KACrLL,SAASI,eAAe,aAAaE,aAAa,QAASR,O,GArB3CS,aCyBTC,E,YAxBX,WAAYd,GAAO,qEACTA,I,sEAKN,OACI,yBAAKC,UAAU,gBACX,yBAAKC,GAAG,WACJ,kBAAC,IAAD,CAAMC,GAAG,KAAT,c,0CASZ,IAAIC,EAAc,WAAaC,SAASC,SAASC,KAAKC,cAAgB,KACtEF,SAASI,eAAe,WAAWE,aAAa,QAASR,O,GApB3CS,aCyBPE,MAnBf,WAEI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWH,IAC9B,kBAAC,IAAD,CAAOE,KAAK,IAAIC,UAAWlB,QCP3BmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAiB,WACnBC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASI,eAAe,UAGjDS,OAAOO,QACPpB,SAASqB,iBAAiB,eAAe,WACrCJ,OACD,GAEHA,IDoHE,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ffb38e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport '../App.css';\r\n\r\nclass QuestView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //delete if not needed\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"standardView\">\r\n                <div id=\"questView\">\r\n                    <div>\r\n                        <Link to=\"/map\">Map</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        let body_height = \"height: \" + (parseInt(document.body.scrollHeight) - (2*parseInt(getComputedStyle(document.getElementById('questView'),null).getPropertyValue('border-width')))) + \"px\";\r\n        document.getElementById(\"questView\").setAttribute(\"style\", body_height);\r\n    }\r\n}\r\n\r\nexport default QuestView;\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport '../App.css';\r\n\r\nclass MapView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //delete if not needed\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"standardView\">\r\n                <div id=\"mapView\">\r\n                    <Link to=\"/\">Quests</Link>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        //let body_height = \"height: \" + (parseInt(document.body.scrollHeight) - (2*parseInt(getComputedStyle(document.getElementById('questView'),null).getPropertyValue('border-width')))) + \"px\";\r\n        let body_height = \"height: \" + parseInt(document.body.scrollHeight) + \"px\";\r\n        document.getElementById(\"mapView\").setAttribute(\"style\", body_height);\r\n    }\r\n\r\n}\r\n\r\nexport default MapView;\r\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport './App.css';\nimport QuestView from './view_quests/QuestView.js';\nimport MapView from './view_map/MapView';\n\n\nfunction App() {\n    // constructor(props){}\n    return (\n        <div>\n            <Router>\n                <Switch>\n                    <Route path=\"/map\" component={MapView}/>\n                    <Route path=\"/\" component={QuestView}/>\n                </Switch>\n            </Router>\n            {/*    <Route path=\"/view_quests/QuestView.js\">*/}\n            {/*        <QuestView class=\"standardView\" />*/}\n            {/*    </Route>*/}\n            {/*<QuestView class=\"standardView\"/>*/}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n    document.addEventListener('deviceready', () => {\n        renderReactDom();\n    }, false);\n} else {\n    renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}